---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: nextcloud
  namespace: nextcloud
spec:
  interval: ${HELM_RELEASE_INTERVAL:=24h}
  chart:
    spec:
      # renovate: registryUrl=https://nextcloud.github.io/helm/
      chart: nextcloud
      version: 3.4.5
      sourceRef:
        kind: HelmRepository
        name: nextcloud
        namespace: flux-system
  values:
    # TODO: Re-evaluate: https://github.com/ishioni/homelab-ops/blob/master/cluster/apps/fileservers/nextcloud/helmrelease.yaml
    image:
      tag: 25.0.3
    ingress:
      enabled: true
      annotations:
        hajimari.io/enable: "true"
        hajimari.io/icon: simple-icons:nextcloud
        hajimari.io/info: File and Calendar server
        hajimari.io/group: tools
        nginx.ingress.kubernetes.io/proxy-body-size: "10G"
        nginx.ingress.kubernetes.io/custom-http-errors: "418"
        nginx.ingress.kubernetes.io/server-snippet: |-
          server_tokens off;
          # Specify how to handle directories -- specifying `/index.php$request_uri`
          # here as the fallback means that Nginx always exhibits the desired behaviour
          # when a client requests a path that corresponds to a directory that exists
          # on the server. In particular, if that directory contains an index.php file,
          # that file is correctly served; if it doesn't, then the request is passed to
          # the front-end controller. This consistent behaviour means that we don't need
          # to specify custom rules for certain paths (e.g. images and other assets,
          # `/updater`, `/ocm-provider`, `/ocs-provider`), and thus
          # `try_files $uri $uri/ /index.php$request_uri`
          # always provides the desired behaviour.
          index index.php index.html /index.php$request_uri;

          # Rule borrowed from `.htaccess` to handle Microsoft DAV clients
          location = / {
              if ( $http_user_agent ~ ^DavClnt ) {
                  return 302 /remote.php/webdav/$is_args$args;
              }
          }

          location = /robots.txt {
              allow all;
              log_not_found off;
              access_log off;
          }

          # Make a regex exception for `/.well-known` so that clients can still
          # access it despite the existence of the regex rule
          # `location ~ /(\.|autotest|...)` which would otherwise handle requests
          # for `/.well-known`.
          location ^~ /.well-known {
              # The following 6 rules are borrowed from `.htaccess`

              location = /.well-known/carddav     { return 301 /remote.php/dav/; }
              location = /.well-known/caldav      { return 301 /remote.php/dav/; }
              # Anything else is dynamically handled by Nextcloud
              location ^~ /.well-known            { return 301 /index.php$uri; }

              try_files $uri $uri/ =404;
          }

          # Rules borrowed from `.htaccess` to hide certain paths from clients
          location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/)  { return 404; }
          location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console)              { return 404; }

          # Ensure this block, which passes PHP files to the PHP process, is above the blocks
          # which handle static assets (as seen below). If this block is not declared first,
          # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`
          # to the URI, resulting in a HTTP 500 error response.
          location ~ \.php(?:$|/) {
              fastcgi_split_path_info ^(.+?\.php)(/.*)$;
              set $path_info $fastcgi_path_info;

              try_files $fastcgi_script_name =404;

              include fastcgi_params;
              fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
              fastcgi_param PATH_INFO $path_info;
              #fastcgi_param HTTPS on;

              fastcgi_param modHeadersAvailable true;         # Avoid sending the security headers twice
              fastcgi_param front_controller_active true;     # Enable pretty urls
              fastcgi_pass php-handler;

              fastcgi_intercept_errors on;
              fastcgi_request_buffering off;
          }

          location ~ \.(?:css|js|svg|gif)$ {
              try_files $uri /index.php$request_uri;
              expires 6M;         # Cache-Control policy borrowed from `.htaccess`
              access_log off;     # Optional: Don't log access to assets
          }

          location ~ \.woff2?$ {
              try_files $uri /index.php$request_uri;
              expires 7d;         # Cache-Control policy borrowed from `.htaccess`
              access_log off;     # Optional: Don't log access to assets
          }

          location / {
              try_files $uri $uri/ /index.php$request_uri;
          }
      tls:
      - hosts:
        - &host cloud.${PRIMARY_DOMAIN}
    redis:
      enabled: true
      # password: set in secret
      master:
        persistence:
          enabled: false
      replica:
        persistence:
          enabled: false
    internalDatabase:
      enabled: false
    externalDatabase:
      enabled: true
      type: postgresql
      database: nextcloud
      host: postgres-rw.nextcloud.svc:5432
      existingSecret:
        enabled: true
        secretName: postgres-app
        usernameKey: username
        passwordKey: password
    cronjob:
      enabled: true
      failedJobsHistoryLimit: 1
      successfulJobsHistoryLimit: 1
    nextcloud:
      host: *host
    livenessProbe:
      enabled: false
    readinessProbe:
      enabled: false
    persistence:
      enabled: true
      existingClaim: nextcloud
